(function() {
  var dispatch, getVimState, settings, _ref;

  _ref = require('./spec-helper'), getVimState = _ref.getVimState, dispatch = _ref.dispatch;

  settings = require('../lib/settings');

  describe("Operator Increase", function() {
    var editor, editorElement, ensure, keystroke, set, vimState, _ref1;
    _ref1 = [], set = _ref1[0], ensure = _ref1[1], keystroke = _ref1[2], editor = _ref1[3], editorElement = _ref1[4], vimState = _ref1[5];
    beforeEach(function() {
      return getVimState(function(state, vim) {
        vimState = state;
        editor = vimState.editor, editorElement = vimState.editorElement;
        return set = vim.set, ensure = vim.ensure, keystroke = vim.keystroke, vim;
      });
    });
    afterEach(function() {
      return vimState.resetNormalMode();
    });
    describe("the ctrl-a/ctrl-x keybindings", function() {
      beforeEach(function() {
        return set({
          text: "123\nab45\ncd-67ef\nab-5\na-bcdef",
          cursorBuffer: [[0, 0], [1, 0], [2, 0], [3, 3], [4, 0]]
        });
      });
      describe("increasing numbers", function() {
        describe("normal-mode", function() {
          it("increases the next number", function() {
            return ensure('ctrl-a', {
              text: '124\nab46\ncd-66ef\nab-4\na-bcdef',
              cursorBuffer: [[0, 2], [1, 3], [2, 4], [3, 3], [4, 0]]
            });
          });
          it("repeats with .", function() {
            return ensure('ctrl-a .', {
              text: '125\nab47\ncd-65ef\nab-3\na-bcdef',
              cursorBuffer: [[0, 2], [1, 3], [2, 4], [3, 3], [4, 0]]
            });
          });
          it("can have a count", function() {
            return ensure('5 ctrl-a', {
              cursorBuffer: [[0, 2], [1, 3], [2, 4], [3, 2], [4, 0]],
              text: '128\nab50\ncd-62ef\nab0\na-bcdef'
            });
          });
          it("can make a negative number positive, change number of digits", function() {
            return ensure('9 9 ctrl-a', {
              text: '222\nab144\ncd32ef\nab94\na-bcdef',
              cursorBuffer: [[0, 2], [1, 4], [2, 3], [3, 3], [4, 0]]
            });
          });
          it("does nothing when cursor is after the number", function() {
            set({
              cursorBuffer: [2, 5]
            });
            return ensure('ctrl-a', {
              text: '123\nab45\ncd-67ef\nab-5\na-bcdef',
              cursorBuffer: [[2, 5]]
            });
          });
          it("does nothing on an empty line", function() {
            set({
              text: '\n',
              cursorBuffer: [[0, 0], [1, 0]]
            });
            return ensure('ctrl-a', {
              text: '\n',
              cursorBuffer: [[0, 0], [1, 0]]
            });
          });
          return it("honours the vim-mode-plus.numberRegex setting", function() {
            set({
              text: '123\nab45\ncd -67ef\nab-5\na-bcdef',
              cursorBuffer: [[0, 0], [1, 0], [2, 0], [3, 3], [4, 0]]
            });
            settings.set('numberRegex', '(?:\\B-)?[0-9]+');
            return ensure('ctrl-a', {
              cursorBuffer: [[0, 2], [1, 3], [2, 5], [3, 3], [4, 0]],
              text: '124\nab46\ncd -66ef\nab-6\na-bcdef'
            });
          });
        });
        return describe("visual-mode", function() {
          beforeEach(function() {
            return set({
              text: "1 2 3\n1 2 3\n1 2 3\n1 2 3"
            });
          });
          it("increase number in characterwise selected range", function() {
            set({
              cursor: [0, 2]
            });
            return ensure('v 2 j ctrl-a', {
              text: "1 3 4\n2 3 4\n2 3 3\n1 2 3",
              selectedText: "3 4\n2 3 4\n2 3",
              cursor: [2, 3]
            });
          });
          it("increase number in characterwise selected range when multiple cursors", function() {
            set({
              cursor: [0, 2],
              addCursor: [2, 2]
            });
            return ensure('v 1 0 ctrl-a', {
              text: "1 12 3\n1 2 3\n1 12 3\n1 2 3",
              selectedTextOrdered: ["12", "12"],
              selectedBufferRangeOrdered: [[[0, 2], [0, 4]], [[2, 2], [2, 4]]]
            });
          });
          it("increase number in linewise selected range", function() {
            set({
              cursor: [0, 0]
            });
            return ensure('V 2 j ctrl-a', {
              text: "2 3 4\n2 3 4\n2 3 4\n1 2 3",
              selectedText: "2 3 4\n2 3 4\n2 3 4\n",
              cursor: [3, 0]
            });
          });
          return it("increase number in blockwise selected range", function() {
            set({
              cursor: [1, 2]
            });
            return ensure('ctrl-v 2 l 2 j ctrl-a', {
              text: "1 2 3\n1 3 4\n1 3 4\n1 3 4",
              selectedTextOrdered: ["3 4", "3 4", "3 4"],
              selectedBufferRangeOrdered: [[[1, 2], [1, 5]], [[2, 2], [2, 5]], [[3, 2], [3, 5]]]
            });
          });
        });
      });
      return describe("decreasing numbers", function() {
        describe("normal-mode", function() {
          it("decreases the next number", function() {
            return ensure('ctrl-x', {
              text: '122\nab44\ncd-68ef\nab-6\na-bcdef',
              cursorBuffer: [[0, 2], [1, 3], [2, 4], [3, 3], [4, 0]]
            });
          });
          it("repeats with .", function() {
            return ensure('ctrl-x .', {
              text: '121\nab43\ncd-69ef\nab-7\na-bcdef',
              cursorBuffer: [[0, 2], [1, 3], [2, 4], [3, 3], [4, 0]]
            });
          });
          it("can have a count", function() {
            return ensure('5 ctrl-x', {
              text: '118\nab40\ncd-72ef\nab-10\na-bcdef',
              cursorBuffer: [[0, 2], [1, 3], [2, 4], [3, 4], [4, 0]]
            });
          });
          it("can make a positive number negative, change number of digits", function() {
            return ensure('9 9 ctrl-x', {
              text: '24\nab-54\ncd-166ef\nab-104\na-bcdef',
              cursorBuffer: [[0, 1], [1, 4], [2, 5], [3, 5], [4, 0]]
            });
          });
          it("does nothing when cursor is after the number", function() {
            set({
              cursorBuffer: [2, 5]
            });
            return ensure('ctrl-x', {
              text: '123\nab45\ncd-67ef\nab-5\na-bcdef',
              cursorBuffer: [[2, 5]]
            });
          });
          it("does nothing on an empty line", function() {
            set({
              text: '\n',
              cursorBuffer: [[0, 0], [1, 0]]
            });
            return ensure('ctrl-x', {
              text: '\n',
              cursorBuffer: [[0, 0], [1, 0]]
            });
          });
          return it("honours the vim-mode-plus.numberRegex setting", function() {
            set({
              text: '123\nab45\ncd -67ef\nab-5\na-bcdef',
              cursorBuffer: [[0, 0], [1, 0], [2, 0], [3, 3], [4, 0]]
            });
            settings.set('numberRegex', '(?:\\B-)?[0-9]+');
            return ensure('ctrl-x', {
              text: '122\nab44\ncd -68ef\nab-4\na-bcdef',
              cursorBuffer: [[0, 2], [1, 3], [2, 5], [3, 3], [4, 0]]
            });
          });
        });
        return describe("visual-mode", function() {
          beforeEach(function() {
            return set({
              text: "1 2 3\n1 2 3\n1 2 3\n1 2 3"
            });
          });
          it("decrease number in characterwise selected range", function() {
            set({
              cursor: [0, 2]
            });
            return ensure('v 2 j ctrl-x', {
              text: "1 1 2\n0 1 2\n0 1 3\n1 2 3",
              selectedText: "1 2\n0 1 2\n0 1",
              cursor: [2, 3]
            });
          });
          it("decrease number in characterwise selected range when multiple cursors", function() {
            set({
              cursor: [0, 2],
              addCursor: [2, 2]
            });
            return ensure('v 5 ctrl-x', {
              text: "1 -3 3\n1 2 3\n1 -3 3\n1 2 3",
              selectedTextOrdered: ["-3", "-3"],
              selectedBufferRangeOrdered: [[[0, 2], [0, 4]], [[2, 2], [2, 4]]]
            });
          });
          it("decrease number in linewise selected range", function() {
            set({
              cursor: [0, 0]
            });
            return ensure('V 2 j ctrl-x', {
              text: "0 1 2\n0 1 2\n0 1 2\n1 2 3",
              selectedText: "0 1 2\n0 1 2\n0 1 2\n",
              cursor: [3, 0]
            });
          });
          return it("decrease number in blockwise selected rage", function() {
            set({
              cursor: [1, 2]
            });
            return ensure('ctrl-v 2 l 2 j ctrl-x', {
              text: "1 2 3\n1 1 2\n1 1 2\n1 1 2",
              selectedTextOrdered: ["1 2", "1 2", "1 2"],
              selectedBufferRangeOrdered: [[[1, 2], [1, 5]], [[2, 2], [2, 5]], [[3, 2], [3, 5]]]
            });
          });
        });
      });
    });
    return describe("the 'g ctrl-a', 'g ctrl-x' increment-number, decrement-number", function() {
      describe("increment", function() {
        beforeEach(function() {
          return set({
            text: "1 10 0\n0 7 0\n0 0 3",
            cursor: [0, 0]
          });
        });
        it("use first number as base number case-1", function() {
          set({
            text: "1 1 1",
            cursor: [0, 0]
          });
          return ensure('g ctrl-a $', {
            text: "1 2 3",
            mode: 'normal',
            cursor: [0, 0]
          });
        });
        it("use first number as base number case-2", function() {
          set({
            text: "99 1 1",
            cursor: [0, 0]
          });
          return ensure('g ctrl-a $', {
            text: "99 100 101",
            mode: 'normal',
            cursor: [0, 0]
          });
        });
        it("can take count, and used as step to each increment", function() {
          set({
            text: "5 0 0",
            cursor: [0, 0]
          });
          return ensure('5 g ctrl-a $', {
            text: "5 10 15",
            mode: 'normal',
            cursor: [0, 0]
          });
        });
        it("only increment number in target range", function() {
          set({
            cursor: [1, 2]
          });
          return ensure('g ctrl-a j', {
            text: "1 10 0\n0 1 2\n3 4 5",
            mode: 'normal'
          });
        });
        it("works in characterwise visual-mode", function() {
          set({
            cursor: [1, 2]
          });
          return ensure('v j g ctrl-a', {
            text: "1 10 0\n0 7 8\n9 10 3",
            mode: 'normal'
          });
        });
        it("works in blockwise visual-mode", function() {
          set({
            cursor: [0, 2]
          });
          return ensure('ctrl-v 2 j $ g ctrl-a', {
            text: "1 10 11\n0 12 13\n0 14 15",
            mode: 'normal'
          });
        });
        return describe("point when finished and repeatable", function() {
          beforeEach(function() {
            set({
              text: "1 0 0 0 0",
              cursor: [0, 0]
            });
            return ensure("v $", {
              selectedText: '1 0 0 0 0'
            });
          });
          it("put cursor on start position when finished and repeatable (case: selection is not reversed)", function() {
            ensure({
              selectionIsReversed: false
            });
            ensure('g ctrl-a', {
              text: "1 2 3 4 5",
              cursor: [0, 0],
              mode: 'normal'
            });
            return ensure('.', {
              text: "6 7 8 9 10",
              cursor: [0, 0]
            });
          });
          return it("put cursor on start position when finished and repeatable (case: selection is reversed)", function() {
            ensure('o', {
              selectionIsReversed: true
            });
            ensure('g ctrl-a', {
              text: "1 2 3 4 5",
              cursor: [0, 0],
              mode: 'normal'
            });
            return ensure('.', {
              text: "6 7 8 9 10",
              cursor: [0, 0]
            });
          });
        });
      });
      return describe("decrement", function() {
        beforeEach(function() {
          return set({
            text: "14 23 13\n10 20 13\n13 13 16",
            cursor: [0, 0]
          });
        });
        it("use first number as base number case-1", function() {
          set({
            text: "10 1 1"
          });
          return ensure('g ctrl-x $', {
            text: "10 9 8",
            mode: 'normal',
            cursor: [0, 0]
          });
        });
        it("use first number as base number case-2", function() {
          set({
            text: "99 1 1"
          });
          return ensure('g ctrl-x $', {
            text: "99 98 97",
            mode: 'normal',
            cursor: [0, 0]
          });
        });
        it("can take count, and used as step to each increment", function() {
          set({
            text: "5 0 0",
            cursor: [0, 0]
          });
          return ensure('5 g ctrl-x $', {
            text: "5 0 -5",
            mode: 'normal',
            cursor: [0, 0]
          });
        });
        it("only decrement number in target range", function() {
          set({
            cursor: [1, 3]
          });
          return ensure('g ctrl-x j', {
            text: "14 23 13\n10 9 8\n7 6 5",
            mode: 'normal'
          });
        });
        it("works in characterwise visual-mode", function() {
          set({
            cursor: [1, 3]
          });
          return ensure('v j l g ctrl-x', {
            text: "14 23 13\n10 20 19\n18 17 16",
            mode: 'normal'
          });
        });
        return it("works in blockwise visual-mode", function() {
          set({
            cursor: [0, 3]
          });
          return ensure('ctrl-v 2 j l g ctrl-x', {
            text: "14 23 13\n10 22 13\n13 21 16",
            mode: 'normal'
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/andy/.atom/packages/vim-mode-plus/spec/operator-increase-spec.coffee
